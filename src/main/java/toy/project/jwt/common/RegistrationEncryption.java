package toy.project.jwt.common;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import javax.crypto.Cipher;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import java.nio.charset.StandardCharsets;import java.util.Base64;@Componentpublic class RegistrationEncryption {    /* 암호화 키 */    private String ENCRYPTION_KEY = "regTest1";    /* 복호화 키 */    private String ENCRYPTION_IV = "regTest2";    /* AES 암호화 인코더 */    public String encryptRegistrationNumber(String registrationNumber) {        try {            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");            SecretKeySpec key = new SecretKeySpec(ENCRYPTION_KEY.getBytes(StandardCharsets.UTF_8), "AES");            IvParameterSpec iv = new IvParameterSpec(ENCRYPTION_IV.getBytes(StandardCharsets.UTF_8));            cipher.init(Cipher.ENCRYPT_MODE, key, iv);            byte[] encryptedBytes = cipher.doFinal(registrationNumber.getBytes(StandardCharsets.UTF_8));            return Base64.getEncoder().encodeToString(encryptedBytes);        } catch (Exception e) {            return "암호화 중 에러 발생";        }    }    /* AES 암호화 디코더 */    public String decryptRegistrationNumber(String encryptedRegistrationNumber) {        try {            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");            SecretKeySpec key = new SecretKeySpec(ENCRYPTION_KEY.getBytes(StandardCharsets.UTF_8), "AES");            IvParameterSpec iv = new IvParameterSpec(ENCRYPTION_IV.getBytes(StandardCharsets.UTF_8));            cipher.init(Cipher.DECRYPT_MODE, key, iv);            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedRegistrationNumber));            return new String(decryptedBytes, StandardCharsets.UTF_8);        } catch (Exception e) {            return "복호화 중 에러 발생";        }    }}